			面向对象高级
昨日内容：
1.多态：
  父类引用指向子类对象

  1）引用类型的转换： 
	向下转型:父类->子类  Animal an   Dog
		if(an instanceof Dog){
			Dog dog=(Dog)an;
		}
	向上转型:子类->父类
   2)方法调用：
	当前对象是否可以调用方法 取决于 当前对象的引用类型
        实际调用的方法  取决于 实际对象类型中是否存在该方法
2.final
  类:孤寡老人类
  变量:常和static连用 为常量
  方法:不可被重写
  static：
	静态 修饰符
	变量：静态成员变量 类中对象共用一个数据
	方法：静态方法 不能直接使用非静态成员
	代码块：类加载时自动加载调用 只调用一次
  
今日内容：
1.抽象类：
  
  需求场景：Animal 父类 
	    Dog  Cat Monkey 
	  共通功能为： 开场介绍 在父类中声明实现，子类中直接使用
	  抽象类：动物都能做自我介绍，但介绍内容完全不一样
		  实现思路：在父类中只做方法的声明、在每个子类中独有化实现

  抽象类格式：
	修饰符 abstract class 类名{}
  抽象方法格式：
	修饰符 abstract 返回值类型 方法名(参数列表);
  特点:1)存在抽象方法的类一定为抽象类
       2)抽象类中不一定存在抽象方法
       3)继承关系中 父类的抽象方法可以被子类继承
	 子类实现全部抽象方法 则子类为实体类
	 子类存在未实现的抽象方法 则子类为抽象类
       4）抽象类不能直接实例化

  练习：
  编程题：
设计四个类，分别是：
（1）Shape表示图形类，有面积属性area、周长属性per，颜色属性color，有两个构造方法（一个是默认的、一个是为颜色赋值的），还有3个抽象方法，分别是：getArea计算面积、getPer计算周长、showAll输出所有信息，还有一个求颜色的方法getColor。
（2）2个子类：
1）Rectangle表示矩形类，增加两个属性，Width表示长度、height表示宽度，重写getPer、getArea和showAll三个方法，另外又增加一个构造方法（一个是默认的、一个是为高度、宽度、颜色赋值的）
2）Circle表示圆类，增加1个属性，radius表示半径，重写getPer、getArea和showAll三个方法，另外又增加两个构造方法（为半径、颜色赋值的）。
（3）一个测试类PolyDemo，在main方法中，声明创建每个子类的对象，并调用2个子类的showAll方法。
	
2.接口：
      一种标准规范
      格式：
	修饰符 interface 接口名{}
	public class Animal{}
      场景：usb 是一种标准、规范包含属性：版本号，声明功能：支持热拔插
	
      特点：1）接口中只能定义常量和抽象方法
	    2）接口被类实现，多实现关系(一个类可以实现多个接口)
	    3）类中如果存在未实现的方法，则当前类为抽象类
	    4）接口和接口之间可以存在继承关系，多继承
       implements 实现关键字

3.单例模式
  设计模式：开发过程中，经过不断的实践 发现某些需求下固定写法代码 会更能提高开发效率，节省资源，这些写法被称为设计模式。
  单例模式：
      在类中应用单例模式 使该类具有单一实例
      应用场景：在需求如果我们需要类只创建一个对象（只有一个用户）
      需求：1）只实例化一次
	    2）实例化的单一对象需要提供外界访问
      解决：1）private 修饰构造方法
	    2）提供公有的方法 获取实例化的对象
 
  单例模式实现方式：
	懒汉：调用需求入口时，在进行创建单个实例
	饿汉：在还没有获取对象时，已经创建了单个实例

   饿汉单例模式：
	只创建一个对象、且该单例对象能够被随时访问到
	//1)私有构造方法
	private User(){}
	//2)创建一个对象 
	（该对象需要被类调用 static修饰，成员一般建议使用private修饰为私有）			
	private static User user = new User();
	//3)访问私有单个成员对象(当前入口需要类直接调用，使用static修饰)
	public static User getInstance(){
		return user;
	} 
   懒汉模式：
	当需要使用单个实例时才创建对象
	//1)构造方法私有化
	private User(){}
	//2)声明当前类 成员
	private static User user; 
	//3)通过访问器方法获取单实例时 创建
	//！！懒汉模式 可能会在多个线程操作时，被多个任务同时访问
	//   多个任务同时访问 则创建实例过程 可能会被多次调用
	//   将当前方法添加线程安全锁 synchronized，确保一次只被一个线程调用
	public synchronized static User getInstance(){
		if(user==null){
			user = new User();
		}
		return user;
	}
	 
    单例模式练习：
	一个班级只有一个班长
	班长 小明、19岁、喊口号“起立”

 



