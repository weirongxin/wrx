			异常
今日内容：
内置类：
    通常开发过程中不建议类中嵌套定义类
    如果需求需要实现在类中定义类，则成为内置类也称为内部类。

    成员内部类
	在类内方法外定义类
	调用方式：
	//1.成员内部类的调用，先实例化外部类 再通过外部类实例化内部类
		Outer outer = new Outer();
		Outer.Inner inner = outer.new Inner();
		inner.innerFunc();
    局部内部类
	在方法内定义的类
	调用方式：
	//3.局部内部类的调用方法
		FuncInner funInner = new FuncInner();
		funInner.funInner();
    静态内部类
	在类内 被static修饰的类
	调用方式;
	//2.静态内部类的调用方法
		Outer.StaticInner.innerFunc();

     ！！！匿名内部类：
	在构造 抽象类、接口时，通过构造方法后添加抽象方法的实现，称为匿名内部类
	Animal an = new Animal(){
			@Override
			public void run2() {
				System.out.println("run2");
			}
		};

异常：
 1.异常：
	代码问题：语法格式有误，称为错误
		  变量声明未使用、录入未关闭等等，黄色图标 称为警告

	开发过程中，由开发人员导致逻辑问题、传参问题等等，称为异常

	举例子：
	小琪  骑自行车 爬山-->期望 一边骑车 一边看风景，很开心
	    1)出门之前 先检查自行车，发现自行车没气了
	      所以不能出门，需要先解决打气问题，即可出门
	    2)爬山过程中，刚开始 在山路上骑的很开心，但是小琪往小路上骑，
	      no zuo no die，从此小琪再也没有回来
	    3)小琪 骑得很开心，突然遇到了 泥石流、山体滑坡小琪及时停止，
	      但骑行过程终止
	异常：
	  1）编译期异常(不得不解决的异常)
	  2）运行期异常(可不解决，由于为了保证程序的健壮，需要添加)
	  3）严重报错 运行时环境问题（内存不够、主板烧了）
	
	系统目前默认处理异常的流程：
		1）运行到出异常的代码行，发生异常。
		2）产生异常信息被虚拟机捕获，
		3）虚拟机根据异常信息生成相应的异常类对象，
		4)根据异常对象在控制台打印异常信息，然后中断程序的执行。	
 2.程序中的异常
     NullPointerException
     InputMismatchException
     ArrayIndexOutOfBoundsException
     ArithmeticException
     ClassCastException
    
    java中的异常基类为Throwable
	
 3.常见的运行期异常：
   异常类结构;
	Object
	-Throwable
	 ----Exception
	     ---RuntimeException
	 ----Error
	
 4.异常处理的格式：
   目的：为了防止异常被虚拟机捕获
	如果被虚拟机捕获则程序崩溃、中断
   处理的位置：运行期异常，在开发人员认为可能会出问题的代码处，添加异常处理语句
	格式：
	    try{
		代码块;
	    }catch(异常类型){
		异常处理语句;
	    }finally{
		资源的释放;
	    }

	
 5.异常对象中常用的方法
	异常类中封装的方法，可以直接调用
	getMessage();  获取异常信息
	printStackTrace();打印异常报错的堆栈
	
   
 6.异常格式的扩展：
	try{}catch(){}catch(){}
	1)try和多个catch连用
	  catch中的异常类 一定是子类在前  父类在后
	2）try catch finally
	  finally可以省略，不略则添加资源释放
	      
 7.异常格式和return关键字的连用
	
     
 8.throw和throws区别：
	throw:在出现异常的代码处将异常对象 抛到上层处理
	throws:在方法声明处，声明该方法可能会出现哪种类型的异常
		（在方法被调用时，能够及时的处理可能出现的异常类型）
     
 9.自定义异常
     
   例子：如果学校需要录入学生成绩，如果录入的成绩是-10分，则提示异常，需要处理
   //如果自定义异常的父类为RuntimeException则不是必须解决的
   //如果父类为Exception 则一定需要解决


  
