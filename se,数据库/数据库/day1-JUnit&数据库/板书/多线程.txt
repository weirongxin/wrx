		线程
1.线程进程：

  进程：计算机给每个应用分配的执行空间、应用空间。
  进程的使用：由计算机给每个进程分配可用资源，分配的资源数量和顺序是由cpu时间片决定。
  
  线程：应用中的任务分配，如果存在多个任务同时进行，则存在多个线程。

  实际如果电脑的配置为单核，则计算机本质一次只能处理一个任务，用户存在多任务的良好体验是由于cpu在多个任务之间频繁来回切换资源的调度。

  主线程：
	每个应用的进程中，默认存在和用户交互的主线程(不能存在耗时操作，阻塞用户交互)
  线程之间的关系：
	线程和线程之间是并列关系
	单条线程中 代码仍是逐行执行(可能阻塞)

2.！线程的生命周期：
  见图

3.线程的使用
  Thread java提供线程操作类
  构造方法：
	Thread() 
          分配新的 Thread 对象。
	Thread(String name) 
          分配新的 Thread 对象。
  实体方法：
	 long getId() 
          返回该线程的标识符。 
	 String getName() 
          返回该线程的名称。 
	 int getPriority() 
          返回线程的优先级。
	 Thread.State getState() 
          返回该线程的状态。  

	void start() 
          使该线程开始执行；Java 虚拟机调用该线程的 run 方法。
	void setName(String name) 
          改变线程名称，使之与参数 name 相同。 
 	void setPriority(int newPriority) 
          更改线程的优先级。 

	

4.线程的控制
1）static void sleep(long millis) 
          在指定的毫秒数内让当前正在执行的线程休眠（暂停执行），此操作受到系统计时器和调度程序精度和准确性的影响。
2）void join() 
          等待该线程终止。 
3）static void yield() 
          暂停当前正在执行的线程对象，并执行其他线程。 
4）void setDaemon(boolean on) 
          将该线程标记为守护线程或用户线程。 
5）void stop() 
	 

5.Runnable接口

  ！线程实现的几种方式：
	两种 继承自Thread类  java中类的继承为单继承，不能存在其他直接父类
	     实现Runnable接口 java中接口为多实现关系，还可以实现其他接口以及继承关系

6.线程数据同步、通信
  object类中操作线程的方法：
	 void notify() 
          唤醒在此对象监视器上等待的单个线程。 
 	 void notifyAll() 
          唤醒在此对象监视器上等待的所有线程。 
 	 void wait() 
          在其他线程调用此对象的 notify() 方法或 notifyAll() 方法前，导致当前线程等待。 
	